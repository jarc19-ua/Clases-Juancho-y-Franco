1c1
< // DNI 48720625R Juan Alejandro Reyes Cava
---
> // DNI 48762664L ROCA DE TOGORES GINESTAR, JUAN
3,6c3,5
< #include <fstream> // Para usar ficheros
< #include <vector>  // Para usar vector
< #include <cctype>  // isdigit() isalpha()
< #include <string.h>
---
> #include <fstream>
> #include <vector>
> #include <string>
7a7
> #include <cctype>
8a9
> #include <iomanip>
12,18c13,18
< const int KMAXNIF = 10;
< const int KMAXNAME = 50;
< const int KMAXTELEPHONE = 14;
< 
< // Registro para los pacientes
< struct Patient
< {
---
> const int KMAXNIF=10;
> const int KMAXNAME=50;
> const int KMAXTELEPHONE=14;
> const int kMAXFILENAME = 255;
> 
> struct Patient{
24,26c24
< // Registro para los pacientes en fichero binario
< struct PatientBin
< {
---
> struct PatientBin{
32,34c30
< // Registro para las fechas
< struct Date
< {
---
> struct Date{
40,42c36
< // Registro para las analíticas
< struct Analysis
< {
---
> struct Analysis{
50,52c44
< // Registro para la base de datos
< struct Database
< {
---
> struct Database{
58,60c50
< // Tipos de errores posibles
< enum Error
< {
---
> enum Error {
62c52
<     ERR_FILE_NOT_EXISTS,
---
>     ERR_FILE,
73,140c63,94
< /*
< Función que muestra los distintos tipos de errores posibles
< e: tipo de error a mostrar
< return: void
< */
< void error(Error e)
< {
<     switch (e)
<     {
<     case ERR_ARGS:
<         cout << "ERROR: wrong arguments" << endl;
<         break;
<     case ERR_FILE_NOT_EXISTS:
<         cout << "ERROR: cannot open file" << endl;
<         break;
<     case ERR_OPTION:
<         cout << "ERROR: wrong option" << endl;
<         break;
<     case ERR_PATIENT_EXISTS:
<         cout << "ERROR: patient already exists" << endl;
<         break;
<     case ERR_PATIENT_NOT_EXISTS:
<         cout << "ERROR: patient does not exist" << endl;
<         break;
<     case ERR_WRONG_DATE:
<         cout << "ERROR: wrong date" << endl;
<         break;
<     case ERR_WRONG_NAME:
<         cout << "ERROR: wrong name" << endl;
<         break;
<     case ERR_WRONG_NIF:
<         cout << "ERROR: wrong NIF" << endl;
<         break;
<     case ERR_WRONG_NUMBER:
<         cout << "ERROR: wrong number " << endl;
<         break;
<     case ERR_WRONG_TELEPHONE:
<         cout << "ERROR: wrong telephone number" << endl;
<     }
< }
< 
< /*
< Función que muestra el menú de opciones
< return: void
< */
< void showMenu()
< {
<     cout << "1- Add patient" << endl
<          << "2- View Patient" << endl
<          << "3- Delete patient" << endl
<          << "4- Save patients" << endl
<          << "5- Add analysis" << endl
<          << "6- Export analysis" << endl
<          << "7- Import analysis" << endl
<          << "8- Statistics" << endl
<          << "q- Quit" << endl
<          << "Option: ";
< }
< 
< bool Argumentos(int argc, char *argv[], bool &fichero, string &nombreFichero, bool &mostrarEstadisticas)
< {
<     fichero = false;
<     mostrarEstadisticas = false;
<     bool argumentosMal = false;
< 
<     stringstream aux;
<     if (argc > 1)
<     {
---
> // DECLARACIÓN DE FUNCIONES AUXILIARES
> bool validateNIF(string &cadena);
> int searchPatient(vector<Patient> patients, string &nif);
> bool validateName(string &name);
> bool validateTelf(string &telf);
> void fixDate(int &num);
> 
> // DECLARACIÓN DE FUNCIONES
> void error(Error e);
> void showMenu();
> void addPatient(vector<Patient>& patients);
> void loadPatients(vector<Patient>& patients);
> void addAnalysis(vector<Patient>& patients, vector<Analysis>& analysis, int* id);
> void viewPatient(vector<Patient>& patients, vector<Analysis>& analysis);
> void exportAnalysis(vector<Analysis>& analysis);
> void importAnalysis(vector<Analysis>& analysis, vector<Patient>& patients, Database& data);
> void deletePatient(vector<Patient>& patients, vector<Analysis>& analysis);
> void statistics(vector<Patient>& patients, vector<Analysis>& analysis);
> void savePatients(vector<Patient>& patients);
> 
> //MAIN
> int main(int argc, char *argv[]){
>     Database data;
>     data.nextId=1;
>     int id = data.nextId;
>     char option;
>     loadPatients(data.patients);
>     
>     bool useFile = false, showStats = false, argswrong = false;
>     char fileName[kMAXFILENAME];
>     
>     if(argc > 1) {
142,165c96,110
<         while (i < argc && !argumentosMal)
<         {
<             if (strcmp(argv[i], "-f") == 0)
<             {
<                 if (fichero || i + 1 >= argc)
<                 {
<                     argumentosMal = true;
<                 }
<                 else
<                 {
<                     fichero = true;
<                     nombreFichero = (string)argv[i + 1];
<                     i += 2;
<                 }
<             }
<             else if (strcmp(argv[i], "-s") == 0)
<             {
<                 if (mostrarEstadisticas)
<                 {
<                     argumentosMal = true;
<                 }
<                 else
<                 {
<                     mostrarEstadisticas = true;
---
>         while(i < argc && !argswrong) {
>             if(strcmp(argv[i], "-f") == 0) {
>                 if(useFile || i + 1 >= argc) {  // Verifica si ya se encontró -f o si no hay argumento después
>                     argswrong = true;
>                 } else {
>                     useFile = true;
>                     strncpy(fileName, argv[i + 1], kMAXFILENAME - 1);  
>                     fileName[kMAXFILENAME - 1] = '\0';
>                     i += 2;  // Avanza 2 posiciones (-f y nombre archivo)
>                 }
>             } else if(strcmp(argv[i], "-s") == 0) {
>                 if(showStats) {
>                     argswrong = true;
>                 } else {
>                     showStats = true;
168,171c113,114
<             }
<             else
<             {
<                 argumentosMal = true;
---
>             } else {
>                 argswrong = true;
174,177c117,120
< 
<         if (!argumentosMal && mostrarEstadisticas && !fichero)
<         {
<             argumentosMal = true;
---
>         
>         // Verificar si -s aparece sin -f
>         if(!argswrong && showStats && !useFile) {
>             argswrong = true;
180,182c123,124
< 
<     if (argumentosMal)
<     {
---
>     
>     if(argswrong) {
183a126
>         return 1;
185,210c128,170
< 
<     return !argumentosMal;
< }
< 
< int searchPatient(string nif, Database &data)
< {
<     int posicion = -1;
<     for (size_t i = 0; i < data.patients.size(); i++)
<     {
<         if (data.patients[i].nif == nif)
<             posicion = i;
<     }
<     return posicion;
< }
< 
< bool ValidarNif(string nif)
< {
<     bool nifValido = false;
<     if (nif.size() == 9)
<     {
<         nifValido = true;
<         for (int i = 0; i < 8; i++)
<         {
<             if (!isdigit(nif[i]))
<             {
<                 nifValido = false;
---
>     
>     if(useFile) {
>         ifstream inputFile(fileName);
>     
>         if(!inputFile) {
>             error(ERR_FILE);
>         } else {
>             string linea;
>             while(getline(inputFile, linea)) {
>                 stringstream ss(linea);
>                 string nif, fecha, peso, altura, imc;
>                 
>                 getline(ss, nif, ';');
>                 getline(ss, fecha, ';');
>                 getline(ss, peso, ';');
>                 getline(ss, altura, ';');
>                 getline(ss, imc, '\n');  // Cambiado a '\n' para coincidir con el otro código
>     
>                 if(searchPatient(data.patients, nif) != -1) {
>                     Analysis newAnalysis;
>                     newAnalysis.id = data.nextId;
>                     data.nextId++;
>                     strncpy(newAnalysis.nif, nif.c_str(), KMAXNIF - 1);
>                     newAnalysis.nif[KMAXNIF - 1] = '\0';
>                     newAnalysis.weight = stof(peso);
>                     newAnalysis.height = stof(altura);
>     
>                     for(size_t i = 0; i < fecha.length(); i++) {
>                         if(fecha[i] == '/') {
>                             fecha[i] = ' ';
>                         }
>                     }
>                     stringstream aux(fecha);
>                     aux >> newAnalysis.dateAnalysis.day >> newAnalysis.dateAnalysis.month >> newAnalysis.dateAnalysis.year;  // Cambiado << por >>
>     
>                     data.analysis.push_back(newAnalysis);
>                 } else {
>                     ofstream wrongPatients("wrong_patients.txt", ios::app);
>                     if(wrongPatients.is_open()) {  // Añadida comprobación de apertura
>                         wrongPatients << nif << endl;
>                     }
>                     wrongPatients.close();
>                 }
212,215c172
<         }
<         if (!isalpha(nif[8]))
<         {
<             nifValido = false;
---
>             inputFile.close();
218,221c175,224
< 
<     if (!nifValido)
<     {
<         error(ERR_WRONG_NIF);
---
>     
>     if(showStats) {
>         statistics(data.patients,data.analysis);  
>         return 0;
>     }
> 
>     do {
>         showMenu();
>         cin >> option;
>         cin.ignore();
>         
>         switch(option){
>             case '1':
>                 addPatient(data.patients);
>                 break;
>             case '2':
>                 viewPatient(data.patients, data.analysis);
>                 break;
>             case '3':
>                 deletePatient(data.patients, data.analysis);
>                 break;
>             case '4':
>                 savePatients(data.patients);
>                 break;
>             case '5':
>                 addAnalysis(data.patients, data.analysis, &id);
>                 break;
>             case '6':
>                 exportAnalysis(data.analysis);
>                 break;
>             case '7':
>                 importAnalysis(data.analysis, data.patients, data);
>                 break;
>             case '8':
>                 statistics(data.patients, data.analysis);
>                 break;
>             case 'q':
>                 break;
>             default:
>                 error(ERR_OPTION);
>         }
>     } while(option != 'q');
>    
>     return 0;
> }
> // DEFINICIÓN DE LAS FUNCIONES TANTO AUXILIARES COMO NO
> // FUNCIONES AUXILIARES
> bool validateNIF(string &cadena) {                  // Función auxiliar para comprobar el NIF introducido
>     if(cadena.length()!=9) {                    // Si la cadena no tiene 9 carácteres = false
>         return false;
224,225c227
<     return nifValido;
< }
---
>     int contnum=0, contletras=0;                // Contador auxiliar 
227,266c229,241
< void addPatient(Database &data)
< {
<     string nif;
<     string name;
<     string telephone;
<     bool nifValido = false;
<     do
<     {
<         cout << "Enter NIF: ";
<         getline(cin, nif);
<         if (nif == "")
<         {
<             nifValido = true;
<         }
<         else
<         {
<             nifValido = ValidarNif(nif);
<             if (nifValido)
<             {
<                 if (searchPatient(nif, data) != -1)
<                 {
<                     error(ERR_PATIENT_EXISTS);
<                     nifValido = false;
<                 }
<                 else
<                 {
<                     bool nombreValido = false;
<                     do
<                     {
<                         cout << "Enter name: ";
<                         getline(cin, name);
<                         if (name.size() >= 3)
<                         {
<                             nombreValido = true;
<                         }
<                         else
<                         {
<                             error(ERR_WRONG_NAME);
<                         }
<                     } while (!nombreValido);
---
>     for(char& c : cadena) {                      // Recorrer string
>         if(isdigit(c)) {
>             contnum++;
>         } else if(isalpha(c)) {
>             contletras++;
>         } 
>     }
>     
>     for(int i = 0; i < 8; i++) {
>         if(!isdigit(cadena[i])) {
>             return false;
>         }
>     }
268,285c243,245
<                     bool telefonoValido = false;
<                     do
<                     {
<                         cout << "Enter telephone: ";
<                         getline(cin, telephone);
<                         if (telephone[0] == '+' && telephone.size() <= 13 && telephone.size() >= 11)
<                         {
<                             telefonoValido = true;
<                         }
<                         else
<                         {
<                             error(ERR_WRONG_TELEPHONE);
<                         }
<                     } while (!telefonoValido);
<                     Patient paciente;
<                     paciente.name = name;
<                     paciente.nif = nif;
<                     paciente.telephone = telephone;
---
>     if(!isalpha(cadena[8])) {
>         return false;
>     }
287,290c247,256
<                     data.patients.push_back(paciente);
<                     nifValido = true;
<                 }
<             }
---
>     if(contnum != 8 || contletras != 1) {
>         return false;  
>     }
>     return true;
> }
> int searchPatient(vector<Patient> patients, string &nif) {      // Función auxiliar para comprobar si existe el paciente
>     int aux = - 1;
>     for(size_t i = 0; i < patients.size(); i++) {               // Recorrer el vector de "patients"
>         if(patients[i].nif == nif) {
>             aux = i;                                           // Si este existe la función devolverá la posición del vector 
292c258,266
<     } while (!nifValido);
---
>     }
>     return aux;  // Devuelve -1 si el paciente no existe
> }
> bool validateName(string &name) {                   // Función auxiliar para comprobar si el nombre tiene al menos 3 carácteres
>     if(name.length() < 3) {
>         return false;
>     } else {
>         return true;
>     }
293a268,271
> bool validateTelf(string &telf) {               // Función auxiliar para comprobar los requesitos pedidos del teléfono del paciente
>     if(telf.length() < 11 || telf.length() > 13) {      // Comprueba la correcta longitud del número de teléfono
>         return false;
>     }
295,305c273,279
< void viewPatient(Database &data)
< {
<     string nif;
<     int posicion = -1;
<     do
<     {
<         cout << "Enter NIF: ";
<         getline(cin, nif);
<         if (nif.empty())
<         {
<             return;
---
>     if(telf[0] != '+') {        // Comprueba si se ha puesta el prefijo
>         return false;
>     }
> 
>     for(size_t i = 1; i < telf.length(); i++) {     // Comprueba si hay una letra en el número introducido
>         if(!isdigit(telf[i])) {
>             return false;
306a281
>     }
308,310c283,286
<         if (ValidarNif(nif))
<         {
<             posicion = searchPatient(nif, data);
---
>     return true;        // Si el número es correcto, este devolverá true
> }
> void fixDate(int &num) {        // Función auxiliar para arreglar las fecchas y ser mostradas como se  debe 1 => 01
>     string aux = to_string(num);
312,349c288,292
<             if (posicion == -1)
<             {
<                 error(ERR_PATIENT_NOT_EXISTS);
<             }
<         }
<     } while (posicion == -1);
<     Patient paciente = data.patients[posicion];
<     cout << "NIF: " << paciente.nif << endl;
<     cout << "Name: " << paciente.name << endl;
<     cout << "Telephone: " << paciente.telephone << endl;
<     bool hayAnalisis = true;
<     {
< 
<         for (size_t j = 0; j < data.analysis.size(); j++)
<         {
< 
<             if (data.analysis[j].nif == paciente.nif)
<             {
<                 if (hayAnalisis)
<                 {
<                     cout << "Id\tDate\tHeight\tWeight" << endl;
<                     hayAnalisis = false;
<                 }
<                 cout << data.analysis[j].id << "\t";
<                 if (data.analysis[j].dateAnalysis.day < 10 && data.analysis[j].dateAnalysis.day >= 1)
<                 {
<                     cout << "0";
<                 }
<                 cout << data.analysis[j].dateAnalysis.day << "/";
<                 if (data.analysis[j].dateAnalysis.month < 10 && data.analysis[j].dateAnalysis.day >= 1)
<                 {
<                     cout << "0";
<                 }
<                 cout << data.analysis[j].dateAnalysis.month << "/";
<                 cout << data.analysis[j].dateAnalysis.year << "\t";
<                 cout << data.analysis[j].height << "\t";
<                 cout << data.analysis[j].weight << endl;
<             }
---
>     int cont = 0;
> 
>     for(auto& c : aux) {
>         if(isdigit(c)) {
>             cont++;
352d294
< }
354,364c296,348
< void deletePatient(Database &data)
< {
<     bool nifValido = false;
<     string nif = "";
< 
<     do
<     {
<         cout << "Enter NIF:";
<         getline(cin, nif);
<         if (nif.empty())
<         {
---
>     if(cont != 2) {
>         cout << "0" << aux;
>     } else {
>         cout << aux;
>     }
> }
> // FUNCIONES
> void error(Error e){ // Función de mostrar errores
>     switch (e){
>         case ERR_ARGS: cout << "ERROR: wrong arguments" << endl;
>             break;
>         case ERR_FILE: cout << "ERROR: cannot open file" << endl;
>             break;
>         case ERR_OPTION: cout << "ERROR: wrong option" << endl;
>             break;
>         case ERR_PATIENT_EXISTS: cout << "ERROR: patient already exists" << endl;
>             break;
>         case ERR_PATIENT_NOT_EXISTS: cout << "ERROR: patient does not exist" << endl;
>             break;
>         case ERR_WRONG_DATE: cout << "ERROR: wrong date" << endl;
>             break;
>         case ERR_WRONG_NAME: cout << "ERROR: wrong name " << endl;
>             break;
>         case ERR_WRONG_NIF: cout << "ERROR: wrong NIF " << endl;
>             break;
>         case ERR_WRONG_NUMBER: cout << "ERROR: wrong number " << endl;
>             break;
>         case ERR_WRONG_TELEPHONE: cout << "ERROR: wrong telephone number" << endl;
>     }
> }
> void showMenu() { // Función de mostrar el menú
>     cout << "1- Add patient" << endl
>          << "2- View Patient" << endl
>          << "3- Delete patient" << endl
>          << "4- Save patients" << endl
>          << "5- Add analysis" << endl
>          << "6- Export analysis" << endl
>          << "7- Import analysis" << endl
>          << "8- Statistics" << endl
>          << "q- Quit" << endl
>          << "Option: ";
> }
> void addPatient(vector<Patient>& patients) {  // Función de añadir paciente al vector
>     Patient newPatient;                 // Variable para añadir un nuevo paciente
>     bool nifVal = false;                // Variable auxiliar para comprobar que el NIF cumple todos los requesitos
>     bool nameVal = false;               // Vatiable auxiliar para comprobar que el nombre cumple todos los requesitos
>     bool telVal = false;                // Variable auxiliar para comprobar que el número de teléfono cumple todos los requesitos
> 
>     do {
>         cout << "Enter NIF: ";                           
>         getline(cin, newPatient.nif);               // Escanea el nif introducido por el usuario
>         
>         if(newPatient.nif.empty()) {                // Si la cadena está vacia te manda al menú principal
367,368c351,352
<         if (!ValidarNif(nif))
<         {
---
> 
>         if(!validateNIF(newPatient.nif)) {            // Si después de la comprobación este devuelve false, imprime el error
370c354,383
<             nifValido = false;
---
>             nifVal = false;                
>         } else {
>             int a = searchPatient(patients,newPatient.nif); // variable auxiliar que recoje el valor de la función auxiliar 
>             if(a != -1) {
>                 error(ERR_PATIENT_EXISTS);
>             } else {
>                 nifVal = true;              // Es "true" si cumple todas las condiciones 
>             } 
>         }     
>     } while((!nifVal));
>     
>     do {
>         cout << "Enter name: ";
>         getline(cin, newPatient.name);      // Escanea el nombre introducido por el usuario
> 
>         if(!validateName(newPatient.name)) {    // Si el nombre tiene menos de 3 carácteres devuelve false
>             error(ERR_WRONG_NAME);
>         } else {
>             nameVal = true;         // Si cumple los requesitos, el módulo continua
>         }
>     } while(!nameVal);
> 
>     do {
>         cout << "Enter telephone: ";
>         getline(cin, newPatient.telephone);     // Escanea el número introducido por el usuario
> 
>         if(!validateTelf(newPatient.telephone)) {       // Si el num. de teléfono  no cumple los requesitos este es false
>             error(ERR_WRONG_TELEPHONE);
>         } else {
>             telVal = true;      // Si cumple los requesitos, este será true
372,381c385
<         else
<         {
<             int posicion = searchPatient(nif, data);
<             if (posicion == -1)
<             {
<                 error(ERR_PATIENT_NOT_EXISTS);
<                 nifValido = false;
<             }
<             else
<             {
---
>     } while(!telVal);
383,396c387
<                 for (size_t i = data.analysis.size() - 1; i > 0; i--)
<                 {
<                     if (strcmp(data.analysis[i].nif, nif.c_str()) == 0)
<                     {
<                         data.analysis.erase(data.analysis.begin() + i);
<                     }
<                 }
< 
<                 data.patients.erase(data.patients.begin() + posicion);
< 
<                 nifValido = true;
<             }
<         }
<     } while (!nifValido);
---
>     patients.push_back(newPatient);     // Añadir el paciente al vector de pacientes
397a389,390
> void loadPatients(vector<Patient>& patients) {
>     ifstream archivo("patients.bin", ios::binary);
399,416c392,398
< void savePatients(const Database &data)
< {
<     ofstream fichero("patients.bin", ios::binary);
<     if (fichero.is_open())
<     {
<         for (size_t i = 0; i < data.patients.size(); i++)
<         {
<             PatientBin pacienteBinario;
<             strncpy(pacienteBinario.nif, data.patients[i].nif.c_str(), KMAXNIF);
<             strncpy(pacienteBinario.name, data.patients[i].name.c_str(), KMAXNAME);
<             strncpy(pacienteBinario.telephone, data.patients[i].telephone.c_str(), KMAXTELEPHONE);
<             pacienteBinario.name[KMAXNAME - 1] = '\0';
<             pacienteBinario.nif[KMAXNIF - 1] = '\0';
<             pacienteBinario.telephone[KMAXTELEPHONE - 1] = '\0';
<             fichero.write((const char *)&pacienteBinario, sizeof(PatientBin));
<         }
<         fichero.flush();
<         fichero.close();
---
>     PatientBin patBin;
>     while(archivo.read(reinterpret_cast<char*>(&patBin), sizeof(PatientBin))) {
>         Patient saveP;
>         saveP.name = patBin.name;
>         saveP.nif = patBin.nif;
>         saveP.telephone = patBin.telephone;
>         patients.push_back(saveP);
417a400,401
> 
>     archivo.close();
419,423c403,407
< void addAnalysis(Database &data)
< {
<     string nif;
<     bool nifValido = false;
<     int posicion;
---
> void addAnalysis(vector<Patient>& patients, vector<Analysis>& analysis, int* id) {
>     Analysis newAnalysis;       // Variable del struct
>     Database data;
> 
>     bool nifVal;        // Variable auxiliar para comprobar si el nif introducido por el usuario es valido o no
425,430c409,413
<     do
<     {
<         cout << "Enter NIF:";
<         getline(cin, nif);
<         if (nif.empty())
<         {
---
>     do{
>         cout << "Enter NIF: ";
>         cin.getline(newAnalysis.nif, sizeof(newAnalysis.nif));      // Lee el nif introducido por el usuario
> 
>         if(newAnalysis.nif[0] == '\0') {
433,436c416,419
< 
<         posicion = searchPatient(nif, data);
<         if (posicion == -1)
<         {
---
>         string texto = newAnalysis.nif;     // Hay que pasar el nif a string debido a que la funcion auxiliar llama a un string
>         int a = searchPatient(patients, texto);
>         if(a == -1) {
>             nifVal = false;
438c421,422
<             nifValido = false;
---
>         } else {
>             nifVal = true;          // Si el nif introducido por el usuario es correcto = true
440,468c424
<         else
<         {
<             nifValido = true;
<         }
< 
<     } while (!nifValido);
< 
<     nifValido = true;
<     Date date;
<     string fecha;
<     char slash;
<     bool fechaValida = false;
<     do
<     {
<         cout << "Enter date (day/month/year):";
<         cin >> date.day;
<         cin >> slash;
<         cin >> date.month;
<         cin >> slash;
<         cin >> date.year;
<         if (date.day >= 1 && date.day <= 31 && date.month >= 1 && date.month <= 12 && date.year >= 2025 && date.year <= 2050)
<         {
<             fechaValida = true;
<         }
<         else
<         {
<             error(ERR_WRONG_DATE);
<         }
<     } while (!fechaValida);
---
>     } while(!nifVal);
470,500c426
<     bool pesoValido = false;
<     float weight;
<     do
<     {
<         cout << "Enter weight:";
<         cin >> weight;
<         if (weight > 0)
<         {
<             pesoValido = true;
<         }
<         else
<         {
<             error(ERR_WRONG_NUMBER);
<         }
<     } while (!pesoValido);
<     bool alturaValida = false;
<     float height;
<     string altura;
<     do
<     {
<         cout << "Enter height:";
<         cin >> height;
<         if (height > 0)
<         {
<             alturaValida = true;
<         }
<         else
<         {
<             error(ERR_WRONG_NUMBER);
<         }
<     } while (!alturaValida);
---
>     bool dateVal;       // Variable auxiliar para comprobar si el nif introducido por el usuario es valido o no
502,523c428,431
<     Analysis newAnalysis;
<     newAnalysis.id = data.nextId;
<     data.nextId++;
<     strncpy(newAnalysis.nif, nif.c_str(), KMAXNIF);
<     newAnalysis.dateAnalysis = date;
<     newAnalysis.weight = weight;
<     newAnalysis.height = height;
<     data.analysis.push_back(newAnalysis);
< }
< 
< void exportAnalysis(const Database &data)
< {
<     ofstream fichero("analysis.bin", ios::binary);
<     if (fichero.is_open())
<     {
<         for (size_t i = 0; i < data.analysis.size(); i++)
<         {
<             fichero.write((const char *)&data.analysis[i], sizeof(Analysis));
<         }
<         fichero.close();
<     }
< }
---
>     do {
>         string aux;     // Variable auxiliar para escanear en el formato pedido la fecha
>         cout << "Enter date (day/month/year): ";
>         getline(cin, aux);
525,550c433,435
< void importAnalysis(Database &data)
< {
< 
<     ifstream fichero("analysis.bin", ios::binary);
<     ofstream wrongPatientsFile("wrong_patients.txt", ios::app);
< 
<     if (!wrongPatientsFile.is_open() || !fichero.is_open())
<     {
<         error(ERR_FILE_NOT_EXISTS);
<     }
<     else
<     {
<         Analysis analysis;
<         while (fichero.read((char *)&analysis, sizeof(Analysis)))
<         {
<             string aux(analysis.nif);
<             int posicion = searchPatient(analysis.nif, data);
<             if (posicion == -1)
<             {
<                 wrongPatientsFile << analysis.nif << endl;
<             }
<             else
<             {
<                 analysis.id = data.nextId;
<                 data.nextId++;
<                 data.analysis.push_back(analysis);
---
>         for(char& c : aux ) {       // Reemplazar las barras del string por espacios
>             if(c == '/') {
>                 c = ' ';
552,553c437,440
<         }
<     }
---
>         }     
>         
>         stringstream date(aux);
>         date >> newAnalysis.dateAnalysis.day >> newAnalysis.dateAnalysis.month >> newAnalysis.dateAnalysis.year;        // Para asignar los datos introducidos 
555,571c442,449
<     fichero.close();
<     wrongPatientsFile.close();
< }
< void Statistics(Database &data)
< {
<     ofstream txt("statistics.txt", ios::trunc);
<     float IMC = 0;
< 
<     for (size_t i = 0; i < data.analysis.size(); i++)
<     {
<         cout << data.analysis[i].nif << ";";
<         txt << data.analysis[i].nif << ";";
< 
<         if (data.analysis[i].dateAnalysis.day < 10 && data.analysis[i].dateAnalysis.day >= 1)
<         {
<             cout << "0";
<             txt << "0";
---
>         if(newAnalysis.dateAnalysis.day < 1 || newAnalysis.dateAnalysis.day > 31 ) {        // Comprueba si el dia introducido está bien
>             dateVal = false;
>         } else if(newAnalysis.dateAnalysis.month < 1 || newAnalysis.dateAnalysis.month > 12) {      // Comprueba si el mes introducido está bien
>             dateVal = false;
>         } else if(newAnalysis.dateAnalysis.year < 2025 || newAnalysis.dateAnalysis.year > 2050) {       // Comprueba si el año introducido está bien
>             dateVal = false;
>         } else {
>             dateVal = true;
573,578c451,453
<         cout << data.analysis[i].dateAnalysis.day << "/";
<         txt << data.analysis[i].dateAnalysis.day << "/";
<         if (data.analysis[i].dateAnalysis.month < 10 && data.analysis[i].dateAnalysis.day >= 1)
<         {
<             cout << "0";
<             txt << "0";
---
> 
>         if(!dateVal) {
>             error(ERR_WRONG_DATE);          // Si algun dato está mal, imprime por pantalla el error
580,581c455
<         cout << data.analysis[i].dateAnalysis.month << "/";
<         txt << data.analysis[i].dateAnalysis.month << "/";
---
>     } while(!dateVal);
583,584c457
<         cout << data.analysis[i].dateAnalysis.year << ";";
<         txt << data.analysis[i].dateAnalysis.year << ";";
---
>     bool weightVal;     // Variable auxiliar para comprobar si el peso introducido por el usuario es valido o no
586,587c459,461
<         cout << data.analysis[i].weight << ";";
<         txt << data.analysis[i].weight << ";";
---
>     do {
>         cout << "Enter weight: ";
>         cin >> newAnalysis.weight;      // Lee el peso introducido por el usuario
589,590c463,475
<         cout << data.analysis[i].height << ";";
<         txt << data.analysis[i].height << ";";
---
>         if(newAnalysis.weight < 0) {        // Comprueba si este es positivo
>             error(ERR_WRONG_NUMBER);
>             weightVal = false;
>         } else {
>             weightVal = true;
>         }
>     } while(!weightVal);
>     
>     bool heightVal;         // Variable auxiliar para comprobar si la altura introducido por el usuario es valido o no
> 
>     do {
>         cout << "Enter height: ";
>         cin >> newAnalysis.height;      // Lee la altura introducida por el usuario
592,593c477,496
<         float altura = data.analysis[i].height / 100;
<         IMC = data.analysis[i].weight / (altura * altura);
---
>         if(newAnalysis.height < 0) {        // Comprueba si esta es positiva
>             error(ERR_WRONG_NUMBER);
>             heightVal = false;
>         } else {
>             heightVal = true;
>         }
>     } while(!heightVal);
>     
>     data.nextId = (*id);
>     newAnalysis.id = data.nextId;
>     (*id)++;
> 
>     analysis.push_back(newAnalysis);        // Añade el analisis al vector
> }
> void viewPatient(vector<Patient>& patients, vector<Analysis>& analysis) {  // Función de ver pacientes
>     Patient searchP;            // Variable del struct
>     int a;                      // Variable auxiliar 
>     do {
>         cout << "Enter NIF: ";
>         getline(cin,searchP.nif);       // Lee el nif introducido por el usuario
595,598c498,499
<         if (IMC < 18.5)
<         {
<             cout << "Underweight" << endl;
<             txt << "Underweight" << endl;
---
>         if(searchP.nif.empty()) {       // Si se introduce una cadena vacia te manda al menú 
>             return;
600,603c501,508
<         if (IMC >= 18.5 && IMC < 25)
<         {
<             cout << "Healthy" << endl;
<             txt << "Healthy" << endl;
---
>         if(!validateNIF(searchP.nif)) {
>             error(ERR_WRONG_NIF);
>             a = -1;
>         } else {
>             a = searchPatient(patients, searchP.nif);       // a=-1 si no existe
>             if(a == -1) {
>                 error(ERR_PATIENT_NOT_EXISTS);
>             }
605,608c510,532
<         if (IMC >= 25.0 && IMC < 30)
<         {
<             cout << "Overweight" << endl;
<             txt << "Overweight" << endl;
---
>     } while(a == -1);
> 
>     for(size_t i = 0; i < patients.size(); i++) {       // Recorrer el vector de pacientes
>         if(patients[i].nif == searchP.nif)  {
>             cout << "NIF: " << patients[i].nif << endl
>                  << "Name: " << patients[i].name << endl
>                  << "Telephone: " << patients[i].telephone << endl;
>             bool hasAn = false;                                     // Variable auxiliar para saber si el paciente tiene analisis
>             for(size_t a = 0; a < analysis.size(); a++) {       // recorrer el vector de analisis para comprobar si el paciente tiene analisis
>                 if(patients[i].nif == analysis[a].nif) {        // Imprime todos los datos de los analisis que tenga ese paciente
>                     if (!hasAn) {                               // Imprimir encabezado solo una vez
>                         cout << "Id\tDate\t\tHeight\tWeight" << endl;
>                         hasAn = true;
>                     }
>                     cout << analysis[a].id << "\t";
>                     fixDate(analysis[a].dateAnalysis.day);
>                     cout << "/";
>                     fixDate(analysis[a].dateAnalysis.month);
>                     cout << "/" << analysis[a].dateAnalysis.year << "\t";
>                     cout << analysis[a].height << "\t"
>                          << analysis[a].weight << endl;
>                 }
>             }
610,613c534,543
<         if (IMC >= 30.0)
<         {
<             cout << "Obesity" << endl;
<             txt << "Obesity" << endl;
---
>     }
> }
> void exportAnalysis(vector<Analysis>& analysis) {
>     ofstream archivo("analysis.bin", ios::binary | ios::trunc);      // Abre el archivo en modo binario y sobreescribe
> 
>     if(!archivo) {          // Si este no existe te envia al menu
> 
>     } else {
>         for (const auto& analBin : analysis) { // Usamos referencia constante para eficiencia
>             archivo.write(reinterpret_cast<const char*>(&analBin), sizeof(Analysis)); // Guardar cada elemento
615a546
>     archivo.close();        // Cerrar el archivo
617,619c548,550
< void loadPatients(Database &data)
< {
<     ifstream archivo("patients.bin", ios::binary);
---
> void importAnalysis(vector<Analysis>& analysis, vector<Patient>& patients, Database& data) {
>     ifstream archivo("analysis.bin", ios::binary);  // Abre archivo binario
>     ofstream txt("wrong_patients.txt", ios::app);   // Agrega al final del archivo
621,628c552,567
<     PatientBin pacienteBinario;
<     while (archivo.read(reinterpret_cast<char *>(&pacienteBinario), sizeof(PatientBin)))
<     {
<         Patient pacienteAux;
<         pacienteAux.name = pacienteBinario.name;
<         pacienteAux.nif = pacienteBinario.nif;
<         pacienteAux.telephone = pacienteBinario.telephone;
<         data.patients.push_back(pacienteAux);
---
>     if (!archivo || !txt) {  
>         error(ERR_FILE);    
>     } else {
>         Analysis analBin;
>         while (archivo.read(reinterpret_cast<char*>(&analBin), sizeof(Analysis))) {
>             string aux(analBin.nif);  // Convierte nif de char[] a string
>             int a = searchPatient(patients, aux);
>     
>             if (a == -1) {  
>                 txt << aux << "\n";  // Guarda NIF en wrong_patients.txt
>             } else {  
>                 Analysis saveAn = analBin;  // Copia la analítica
>                 saveAn.id = data.nextId++;  // Asigna un nuevo ID
>                 analysis.push_back(saveAn); // Agrega al vector analysis
>             }
>         }
630a570
>     txt.close();
631a572,578
> void deletePatient(vector<Patient>& patients, vector<Analysis>& analysis) {     // Función de borrar pacientes 
>     Patient deleteP;        //Variable del struct
>     int a;      // Variable auxiliar 
>     bool aux;
>     do {
>         cout << "Enter NIF: ";
>         getline(cin, deleteP.nif);          // Lee el nif introducido por el usuario
633,692c580,587
< /*
< Función principal: Tendrás que añadir más código tuyo
< return: 0
< */
< int main(int argc, char *argv[])
< {
< 
<     bool fichero;
<     string nombreFichero;
<     bool mostrarEstadisticas = false;
<     char nombreFichero2[255];
<     if (Argumentos(argc, argv, fichero, nombreFichero, mostrarEstadisticas))
<     {
< 
<         strcpy(nombreFichero2, nombreFichero.c_str());
<         Database data;
<         data.nextId = 1;
<         loadPatients(data);
< 
<         if (fichero)
<         {
<             ifstream inputFile(nombreFichero2);
< 
<             if (!inputFile)
<             {
<                 error(ERR_FILE_NOT_EXISTS);
<             }
<             else
<             {
<                 string linea;
<                 while (getline(inputFile, linea))
<                 {
<                     stringstream streamLinea(linea);
<                     string nif, fecha, peso, altura, imc;
< 
<                     getline(streamLinea, nif, ';');
<                     getline(streamLinea, fecha, ';');
<                     getline(streamLinea, peso, ';');
<                     getline(streamLinea, altura, ';');
<                     getline(streamLinea, imc, '\n');
< 
<                     if (searchPatient(nif, data) != -1)
<                     {
<                         Analysis analisis;
<                         analisis.id = data.nextId;
<                         data.nextId++;
<                         strncpy(analisis.nif, nif.c_str(), KMAXNIF - 1);
<                         analisis.nif[KMAXNIF - 1] = '\0';
<                         analisis.weight = stof(peso);
<                         analisis.height = stof(altura);
< 
<                         for (size_t i = 0; i < fecha.length(); i++)
<                         {
<                             if (fecha[i] == '/')
<                             {
<                                 fecha[i] = ' ';
<                             }
<                         }
<                         stringstream streamAux(fecha);
<                         streamAux >> analisis.dateAnalysis.day >> analisis.dateAnalysis.month >> analisis.dateAnalysis.year; // Cambiado << por >>
---
>         if(deleteP.nif.empty()) {           // Si este introduce una cadena vacia te envia al menú principal
>             return;
>         }
>         if(!validateNIF(deleteP.nif)) {
>             aux = false;
>             error(ERR_WRONG_NIF);
>         } else {
>             a = searchPatient(patients, deleteP.nif);       // Se le asigna el valor resultante a la variable "a" de la comprobación de su existencia
694c589,595
<                         data.analysis.push_back(analisis);
---
>             if(a == -1) {
>                 error(ERR_PATIENT_NOT_EXISTS);
>                 aux = false;
>             } else if(a != -1) {
>                 for(size_t i = 0; i < patients.size(); i++) {       // For para recorrer el vector de pacientes y eliminar el paciente 
>                     if(patients[i].nif == deleteP.nif) {
>                         patients.erase(patients.begin() + i);
696,703c597,601
<                     else
<                     {
<                         ofstream wrongPatients("wrong_patients.txt", ios::app);
<                         if (wrongPatients.is_open())
<                         { // Añadida comprobación de apertura
<                             wrongPatients << nif << endl;
<                         }
<                         wrongPatients.close();
---
>                 }
>                 
>                 for(size_t n = analysis.size() - 1; n > 0; n--){        // For para recorrer el vector de los analisis y eliminar los analisis de dichoo paciente
>                     if(analysis[n].nif == deleteP.nif) {
>                         analysis.erase(analysis.begin() + n);
706c604
<                 inputFile.close();
---
>                 aux = true;
708a607,610
>     } while(!aux);
> }
> void statistics(vector<Patient>& patients, vector<Analysis>& analysis) {            // Función de mostrar las estadísticas
>     ofstream txt("statistics.txt", ios::trunc);
710,756c612,668
<         if (mostrarEstadisticas)
<         {
<             Statistics(data);
<         }
<         else
<         {
<             char option = 'q';
< 
<             do
<             {
< 
<                 showMenu();
<                 cin >> option;
<                 cin.ignore();
< 
<                 switch (option)
<                 {
<                 case '1': // Llamar a la función "addPatient" para añadir una nueva ficha de paciente
<                     addPatient(data);
<                     break;
<                 case '2': // Llamar a la función "viewPatient" para ver la información de un paciente
<                     viewPatient(data);
<                     break;
<                 case '3': // Llamar a la función "deletePatient" para eliminar una ficha de paciente
<                     deletePatient(data);
<                     break;
<                 case '4': // Llamar a la función "savePatients" para guardar las fichas de pacientes en fichero binario
<                     savePatients(data);
<                     break;
<                 case '5': // Llamar a la función "addAnalysis" para anadir una analítica
<                     addAnalysis(data);
<                     break;
<                 case '6': // Llamar a la función "exportAnalysis" para exportar las analiticas realizadas a fichero binario
<                     exportAnalysis(data);
<                     break;
<                 case '7': // Llamar a la función "importAnalysis" para importar las analiticas en fichero binario
<                     importAnalysis(data);
<                     break;
<                 case '8': // Llamar a la función "statistics" para guardar las preguntas en fichero
<                     Statistics(data);
<                     break;
<                 case 'q': // Salir del programa
<                     break;
<                 default:
<                     error(ERR_OPTION);
<                 }
<             } while (option != 'q');
---
>     for (const auto& a : analysis) {
>         float height_m = a.height / 100;
>         float imc = a.weight / (height_m * height_m);
>         string comp;
> 
>         if (imc < 18.5) {
>             comp = "Underweight";
>         } else if (imc < 25 && imc >= 18.5) {
>             comp = "Healthy";
>         } else if (imc < 30 && imc >=25) {
>             comp = "Overweight";
>         } else {
>             comp = "Obesity";
>         }
> 
>         ostringstream day, month;
>         day << setw(2) << setfill('0') << a.dateAnalysis.day;
>         month << setw(2) << setfill('0') << a.dateAnalysis.month;
> 
>         cout << a.nif << ";"
>              << day.str() << "/" 
>              << month.str() << "/" 
>              << a.dateAnalysis.year << ";"
>              << a.weight << ";" 
>              << a.height << ";" 
>              << comp << endl;
> 
>         txt << a.nif << ";"
>             << day.str() << "/" 
>             << month.str() << "/" 
>             << a.dateAnalysis.year << ";"
>             << a.weight << ";" 
>             << a.height << ";" 
>             << comp << endl;
>     }
> 
>     txt.close();
> }   
> void savePatients(vector<Patient>& patients) {      // Función de de guardar pacientes
>     ofstream archivo("patients.bin", ios::binary | ios::trunc);      // Para abrirlo en binario y sobreescribirlo lo anteriormente escrito
> 
>     if(!archivo) {      // Si no se encuentra el archivo te manda al menú
> 
>     } else {
>         for(const auto& patient : patients) {       // Para recorrer el vector. Si no hubiese que modificar el tamaño del  nombre, se podria hacer de la otra forma también
>             PatientBin PatBin;      // Variable del struct de pacientes binarios
>     
>             strncpy(PatBin.name, patient.name.c_str(), KMAXNAME - 1);       // Copiar el nombre del paciente a la variable para ser pasado al archivo
>             PatBin.name[KMAXNAME - 1] = '\0';       // Asegura una terminación nula
>     
>             strncpy(PatBin.nif, patient.nif.c_str(), KMAXNIF - 1);       // Copiar el nif del paciente a la variable para ser pasado al archivo
>             PatBin.nif[KMAXNIF - 1] = '\0';      // asegura una terminación nula
>     
>             strncpy(PatBin.telephone, patient.telephone.c_str(), KMAXTELEPHONE - 1);     // Copiar el teléfono del paciente a la variable para ser pasado al archivo
>             PatBin.telephone[KMAXTELEPHONE - 1] = '\0';      // Asegura un terminación nula
>             
>             archivo.write(reinterpret_cast<const char*>(&PatBin), sizeof(PatientBin));        // Escribe en el archivo toda la información        // Escribe 
759,760c671,672
< 
<     return 0;
---
>     archivo.flush();
>     archivo.close();        // Cerrar el archivo
